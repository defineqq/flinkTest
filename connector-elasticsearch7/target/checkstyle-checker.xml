<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<module name="Checker">

    <!-- 所有的文本文件都应该以空行符结尾，且使用使用Unix样式的行分隔符-->
    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf"/>
    </module>

    <module name="RegexpSingleline">
        <!-- Checks that TODOs don't have stuff in parenthesis, e.g., username. -->
        <property name="format" value="((//.*)|(\*.*))TODO\("/>
        <property name="message" value="TODO comments must not include usernames."/>
        <property name="severity" value="error"/>
    </module>

    <!-- 行不应该以空格结尾 -->
    <module name="RegexpSingleline">
        <property name="format" value="\s+$"/>
        <property name="message" value="Trailing whitespace"/>
        <property name="severity" value="error"/>
    </module>

    <!-- suppressions文件 -->
    <module name="SuppressionFilter">
        <property name="file" value="${checkstyle.suppressions.file}" default="suppressions.xml"/>
    </module>

    <!-- 源文件最多3000行。-->
    <!-- 源文件很长，则很难理解。因此，长类通常应重构为专注于特定任务的几个单独的类。 -->
    <module name="FileLength">
        <property name="max" value="3000"/>
    </module>

    <!--每个Java文件都是一个TreeWalker-->
    <module name="TreeWalker">

        <!-- 检查Javadoc注释样式-->
        <module name="JavadocStyle">
            <!-- 检查是否缺少描述信息-->
            <property name="checkEmptyJavadoc" value="true"/>
            <!-- 第一句是否是正确结束的句子(第一句在Javadoc中会被放在摘要部分) -->
            <property name="checkFirstSentence" value="false"/>
            <!-- 第一句正确结束的格式 注意: 在xml中需要处理转义问题。-->
            <!--<property name="endOfSentenceFormat" value="([.?!:。[ \t\n\r\f&lt;])|([.?!:]$)"/>-->
            <!-- 如果有HTML标记，是否检查标记的完整性 -->
            <property name="checkHtml" value="true"/>
            <!-- 检查异常时的处理方式,如error或ignore-->
            <property name="severity" value="error"/>
        </module>

        <!-- 检查 Annotation/Enum/Class/Interface的Javadoc -->
        <module name="JavadocType">
            <!-- 对protected以上Class进行检查 -->
            <property name="scope" value="protected"/>
            <!-- 必须包含@author,格式为正则\S-->
            <property name="authorFormat" value="\S"/>
            <!-- 如果是泛型类,必须对泛型进行说明-->
            <property name="allowMissingParamTags" value="false"/>
            <!-- 检查异常时的处理方式,如error或ignore-->
            <property name="severity" value="error"/>
        </module>

        <!-- 检查方法和构造方法的Javadoc -->
        <module name="JavadocMethod">
            <!-- 如果是泛型类,必须对泛型进行说明-->
            <property name="tokens" value="METHOD_DEF"/>
            <property name="severity" value="error"/>
            <property name="allowMissingJavadoc" value="true"/>
            <property name="allowMissingParamTags" value="true"/>
            <property name="allowMissingReturnTag" value="true"/>
            <property name="allowMissingThrowsTags" value="true"/>
            <property name="allowThrowsTagsForSubclasses" value="true"/>
        </module>

        <!-- com.google.common.base.Preconditions中的方法应静态导入-->
        <module name="RegexpSinglelineJava">
            <property name="format" value="^import com.google.common.base.Preconditions;$"/>
            <property name="message" value="Static import functions from Guava Preconditions"/>
        </module>

        <!-- 无用的导入应该去掉 -->
        <module name="UnusedImports">
            <property name="severity" value="error"/>
            <property name="processJavadoc" value="true"/>
            <message key="import.unused" value="Unused import: {0}."/>
        </module>

        <!-- 缩进仅支持使用制表符, 禁用掉。Idea中默认使用的是空格缩进。-->
        <!--<module name="RegexpSinglelineJava">-->
        <!--    <property name="format" value="^\t* +\t*\S"/>-->
        <!--    <property name="message" value="Line has leading space characters; indentation should be performed with tabs only."/>-->
        <!--    <property name="ignoreComments" value="true"/>-->
        <!--</module>-->

        <!-- 强制使用Java类型的数组定义 -->
        <!-- 在Java中既可以使用Java类型的数组定义: int[] nums; 也可以使用C类型的数组定义: int nums1[]; -->
        <module name="ArrayTypeStyle"/>

        <!-- 禁止使用如import java.io.*; import static java.lang.Math.*; 方式导入-->
        <!-- 从包中导入所有类或从类中导入所有静态成员会导致包或类之间紧密耦合，并且当新版本的库引入名称冲突时可能会导致问题-->
        <module name="AvoidStarImport">
            <property name="severity" value="error"/>
        </module>

        <!-- 检查是否导入了禁止导入的包 -->
        <module name="IllegalImport">
            <property name="illegalPkgs"
                      value="autovalue.shaded, avro.shaded, com.google.api.client.repackaged, com.google.appengine.repackaged, org.codehaus.jackson, io.netty, org.objectweb.asm"/>
        </module>

        <!-- 检查段落-->
        <!-- 在段落之后运行新行，注意: 新行的开头。-->
        <module name="JavadocParagraph">
            <property name="allowNewlineParagraph" value="true"/>
        </module>

        <!-- 检查包名是否合法,如不能有大写-->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]{1,})*$"/>
            <property name="severity" value="error"/>
        </module>

        <module name="TypeNameCheck">
            <!-- Validates static, final fields against the
            expression "^[A-Z][a-zA-Z0-9]*$". -->
            <metadata name="altname" value="TypeName"/>
            <property name="severity" value="error"/>
        </module>

        <module name="ConstantNameCheck">
            <!-- Validates non-private, static, final fields against the supplied
            public/package final fields "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$". -->
            <metadata name="altname" value="ConstantName"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="false"/>
            <property name="format" value="^([A-Z][A-Z0-9]*(_[A-Z0-9]+)*|FLAG_.*)$"/>
            <message key="name.invalidPattern"
                     value="Variable ''{0}'' should be in ALL_CAPS (if it is a constant) or be private (otherwise)."/>
            <property name="severity" value="error"/>
        </module>

        <module name="StaticVariableNameCheck">
            <!-- Validates static, non-final fields against the supplied
            expression "^[a-z][a-zA-Z0-9]*_?$". -->
            <metadata name="altname" value="StaticVariableName"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*_?$"/>
            <property name="severity" value="error"/>
        </module>

        <module name="MemberNameCheck">
            <!-- Validates non-static members against the supplied expression. -->
            <metadata name="altname" value="MemberName"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="severity" value="error"/>
        </module>

        <module name="MethodNameCheck">
            <!-- Validates identifiers for method names. -->
            <metadata name="altname" value="MethodName"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*$"/>
            <property name="severity" value="error"/>
        </module>

        <module name="ParameterName">
            <!-- Validates identifiers for method parameters against the
              expression "^[a-z][a-zA-Z0-9]*$". -->
            <property name="severity" value="error"/>
        </module>

        <module name="LocalFinalVariableName">
            <!-- Validates identifiers for local final variables against the
              expression "^[a-z][a-zA-Z0-9]*$". -->
            <property name="severity" value="error"/>
        </module>

        <module name="LocalVariableName">
            <!-- Validates identifiers for local variables against the
              expression "^[a-z][a-zA-Z0-9]*$". -->
            <property name="severity" value="error"/>
        </module>

        <module name="LeftCurly">
            <!-- Checks for placement of the left curly brace ('{'). -->
            <property name="severity" value="error"/>
        </module>

        <!--IF语句是否可以简写-->
        <!--<module name="NeedBraces">-->
        <!--    <property name="severity" value="error"/>-->
        <!--    <property name="tokens" value="LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO"/>-->
        <!--</module>-->

        <module name="UpperEll">
            <!-- Checks that long constants are defined with an upper ell.-->
            <property name="severity" value="error"/>
        </module>

        <module name="FallThrough">
            <!-- Warn about falling through to the next case statementDetail.  Similar to
            javac -Xlint:fallthrough, but the check is suppressed if a single-line comment
            on the last non-blank line preceding the fallen-into case contains 'fall through' (or
            some other variants that we don't publicized to promote consistency).
            -->
            <property name="reliefPattern"
                      value="fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on"/>
            <property name="severity" value="error"/>
        </module>

        <!-- Checks for over-complicated boolean expressions. -->
        <module name="SimplifyBooleanExpression"/>

        <!-- Detects empty statements (standalone ";" semicolon). -->
        <module name="EmptyStatement"/>

        <!-- Detect multiple consecutive semicolons (e.g. ";;"). -->
        <module name="RegexpSinglelineJava">
            <property name="format" value=";{2,}"/>
            <property name="message" value="Use one semicolon"/>
            <property name="ignoreComments" value="true"/>
        </module>

        <!--

        MODIFIERS CHECKS

        -->

        <module name="ModifierOrder">
            <!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and
                 8.4.3.  The prescribed order is:
                 public, protected, private, abstract, static, final, transient, volatile,
                 synchronized, native, strictfp
              -->
            <property name="severity" value="error"/>
        </module>


        <!--

        WHITESPACE CHECKS

        -->

        <module name="EmptyLineSeparator">
            <!-- Checks for empty line separator between tokens. The only
                 excluded token is VARIABLE_DEF, allowing class fields to
                 be declared on consecutive lines.
            -->
            <property name="allowMultipleEmptyLines" value="false"/>
            <property name="allowMultipleEmptyLinesInsideClassMembers" value="false"/>
            <property name="tokens" value="PACKAGE_DEF, IMPORT, CLASS_DEF,
        INTERFACE_DEF, ENUM_DEF, STATIC_INIT, INSTANCE_INIT, METHOD_DEF,
        CTOR_DEF"/>
        </module>

        <module name="WhitespaceAround">
            <!-- Checks that various tokens are surrounded by whitespace.
                 This includes most binary operators and keywords followed
                 by regular or curly braces.
            -->
            <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR,
        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,
        EQUAL, GE, GT, LAMBDA, LAND, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,
        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,
        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,
        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,
        SL, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND"/>
            <property name="severity" value="error"/>
        </module>

        <module name="WhitespaceAfter">
            <!-- Checks that commas, semicolons and typecasts are followed by
                 whitespace.
            -->
            <property name="tokens" value="COMMA, SEMI, TYPECAST"/>
        </module>

        <module name="NoWhitespaceAfter">
            <!-- Checks that there is no whitespace after various unary operators.
                 Linebreaks are allowed.
            -->
            <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,
        UNARY_PLUS"/>
            <property name="allowLineBreaks" value="true"/>
            <property name="severity" value="error"/>
        </module>

        <module name="NoWhitespaceBefore">
            <!-- Checks that there is no whitespace before various unary operators.
                 Linebreaks are allowed.
            -->
            <property name="tokens" value="SEMI, DOT, POST_DEC, POST_INC"/>
            <property name="allowLineBreaks" value="true"/>
            <property name="severity" value="error"/>
        </module>

        <module name="OperatorWrap">
            <!-- Checks that assignment operators are at the end of the line. -->
            <property name="option" value="eol"/>
            <property name="tokens" value="ASSIGN"/>
        </module>

        <module name="ParenPad">
            <!-- Checks that there is no whitespace before close parens or after
                 open parens.
            -->
            <property name="severity" value="error"/>
        </module>

    </module>
</module>